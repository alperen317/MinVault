const swaggerJsdoc = require('swagger-jsdoc');
const config = require('./index');

const options = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: '[PROJECT_NAME] File Upload API',
      version: '1.0.0',
      description: 'A production-ready Node.js backend service for uploading videos and files to a self-hosted MinIO server with S3 API compatibility.',
      contact: {
        name: 'API Support',
        email: 'support@example.com'
      },
      license: {
        name: 'MIT',
        url: 'https://opensource.org/licenses/MIT'
      }
    },
    servers: [
      {
        url: `http://localhost:${config.server.port}`,
        description: 'Development server'
      },
      {
        url: 'https://api.yourdomain.com',
        description: 'Production server'
      }
    ],
    components: {
      schemas: {
        SuccessResponse: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean',
              example: true
            },
            message: {
              type: 'string',
              example: 'Operation completed successfully'
            },
            data: {
              type: 'object'
            }
          },
          required: ['success', 'message']
        },
        ErrorResponse: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean',
              example: false
            },
            error: {
              type: 'string',
              example: 'Error message'
            },
            code: {
              type: 'string',
              example: 'ERROR_CODE'
            },
            message: {
              type: 'string',
              example: 'Detailed error message'
            },
            timestamp: {
              type: 'string',
              format: 'date-time',
              example: '2024-01-01T12:00:00.000Z'
            },
            path: {
              type: 'string',
              example: '/api/files/upload'
            },
            method: {
              type: 'string',
              example: 'POST'
            }
          },
          required: ['success', 'error', 'code', 'timestamp']
        },
        FileUploadResult: {
          type: 'object',
          properties: {
            objectName: {
              type: 'string',
              example: 'video_1640995200000_abc123.mp4',
              description: 'Unique filename generated by the system'
            },
            originalName: {
              type: 'string',
              example: 'my-video.mp4',
              description: 'Original filename provided by user'
            },
            size: {
              type: 'integer',
              example: 1048576,
              description: 'File size in bytes'
            },
            mimetype: {
              type: 'string',
              example: 'video/mp4',
              description: 'MIME type of the uploaded file'
            },
            uploadDate: {
              type: 'string',
              format: 'date-time',
              example: '2024-01-01T12:00:00.000Z'
            },
            accessUrl: {
              type: 'string',
              format: 'uri',
              example: 'https://minio.example.com/bucket/video_1640995200000_abc123.mp4?signature=xyz789',
              description: 'Presigned URL for immediate file access'
            },
            urlExpiresAt: {
              type: 'string',
              format: 'date-time',
              example: '2024-01-01T13:00:00.000Z',
              description: 'Expiration time of the presigned URL'
            }
          },
          required: ['objectName', 'originalName', 'size', 'mimetype', 'uploadDate']
        },
        PresignedUrlResult: {
          type: 'object',
          properties: {
            url: {
              type: 'string',
              format: 'uri',
              example: 'https://minio.example.com/bucket/file.mp4?signature=xyz789',
              description: 'Presigned URL for file access'
            },
            expiresIn: {
              type: 'integer',
              example: 3600,
              description: 'URL expiration time in seconds'
            },
            expiresAt: {
              type: 'string',
              format: 'date-time',
              example: '2024-01-01T13:00:00.000Z',
              description: 'Absolute expiration time'
            }
          },
          required: ['url', 'expiresIn', 'expiresAt']
        },
        FileInfo: {
          type: 'object',
          properties: {
            name: {
              type: 'string',
              example: 'video_1640995200000_abc123.mp4'
            },
            size: {
              type: 'integer',
              example: 1048576
            },
            lastModified: {
              type: 'string',
              format: 'date-time',
              example: '2024-01-01T12:00:00.000Z'
            },
            etag: {
              type: 'string',
              example: 'abc123def456'
            },
            contentType: {
              type: 'string',
              example: 'video/mp4'
            },
            originalName: {
              type: 'string',
              example: 'my-video.mp4'
            },
            uploadDate: {
              type: 'string',
              format: 'date-time',
              example: '2024-01-01T12:00:00.000Z'
            }
          }
        },
        FileListItem: {
          type: 'object',
          properties: {
            name: {
              type: 'string',
              example: 'video_1640995200000_abc123.mp4'
            },
            size: {
              type: 'integer',
              example: 1048576
            },
            lastModified: {
              type: 'string',
              format: 'date-time',
              example: '2024-01-01T12:00:00.000Z'
            },
            etag: {
              type: 'string',
              example: 'abc123def456'
            }
          }
        },
        HealthStatus: {
          type: 'object',
          properties: {
            status: {
              type: 'string',
              enum: ['healthy', 'unhealthy'],
              example: 'healthy'
            },
            timestamp: {
              type: 'string',
              format: 'date-time',
              example: '2024-01-01T12:00:00.000Z'
            },
            minio: {
              type: 'string',
              enum: ['connected', 'disconnected'],
              example: 'connected'
            },
            bucket: {
              type: 'string',
              example: 'uploads'
            }
          }
        }
      },
      parameters: {
        FilenameParam: {
          name: 'filename',
          in: 'path',
          required: true,
          schema: {
            type: 'string',
            example: 'video_1640995200000_abc123.mp4'
          },
          description: 'The unique filename of the file'
        },
        ExpiryQuery: {
          name: 'expiry',
          in: 'query',
          required: false,
          schema: {
            type: 'integer',
            minimum: 1,
            maximum: 604800,
            default: 3600,
            example: 3600
          },
          description: 'URL expiration time in seconds (max 7 days)'
        },
        PrefixQuery: {
          name: 'prefix',
          in: 'query',
          required: false,
          schema: {
            type: 'string',
            example: 'videos/2024/'
          },
          description: 'Filter files by prefix/path'
        },
        LimitQuery: {
          name: 'limit',
          in: 'query',
          required: false,
          schema: {
            type: 'integer',
            minimum: 1,
            maximum: 1000,
            default: 1000,
            example: 100
          },
          description: 'Maximum number of files to return'
        },
        PathField: {
          name: 'path',
          in: 'formData',
          required: false,
          schema: {
            type: 'string',
            example: 'videos/2024'
          },
          description: 'Custom path/folder for file organization'
        }
      },
      responses: {
        BadRequest: {
          description: 'Bad Request',
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorResponse'
              },
              examples: {
                noFile: {
                  summary: 'No file provided',
                  value: {
                    success: false,
                    error: 'No file provided',
                    code: 'NO_FILE',
                    timestamp: '2024-01-01T12:00:00.000Z',
                    path: '/api/files/upload',
                    method: 'POST'
                  }
                },
                fileTooLarge: {
                  summary: 'File too large',
                  value: {
                    success: false,
                    error: 'File too large',
                    message: 'Maximum file size is 100MB',
                    code: 'FILE_TOO_LARGE',
                    timestamp: '2024-01-01T12:00:00.000Z'
                  }
                },
                invalidFileType: {
                  summary: 'Invalid file type',
                  value: {
                    success: false,
                    error: 'Invalid file type',
                    message: 'File type image/gif is not allowed',
                    code: 'INVALID_FILE_TYPE',
                    timestamp: '2024-01-01T12:00:00.000Z'
                  }
                }
              }
            }
          }
        },
        NotFound: {
          description: 'Resource not found',
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorResponse'
              },
              example: {
                success: false,
                error: 'Route not found',
                code: 'NOT_FOUND',
                message: 'Cannot GET /api/files/nonexistent',
                timestamp: '2024-01-01T12:00:00.000Z'
              }
            }
          }
        },
        RateLimit: {
          description: 'Rate limit exceeded',
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorResponse'
              },
              example: {
                success: false,
                error: 'Too many requests',
                code: 'RATE_LIMIT_EXCEEDED',
                message: 'Please try again later',
                timestamp: '2024-01-01T12:00:00.000Z'
              }
            }
          }
        },
        ServiceUnavailable: {
          description: 'Service unavailable',
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorResponse'
              },
              example: {
                success: false,
                error: 'Service unhealthy',
                code: 'SERVICE_UNHEALTHY',
                timestamp: '2024-01-01T12:00:00.000Z'
              }
            }
          }
        }
      }
    },
    tags: [
      {
        name: 'Files',
        description: 'File upload and management operations'
      },
      {
        name: 'Health',
        description: 'Service health monitoring'
      }
    ]
  },
  apis: ['./src/routes/*.js', './src/controllers/*.js']
};

const specs = swaggerJsdoc(options);

module.exports = specs;